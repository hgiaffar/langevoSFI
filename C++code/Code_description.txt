UTILITIES

myutil.h++
   constexpr const double infinity = 1e100;
   inline double probit(const double);
   inline double invprobit(const double);

selfiterator.h++
   template<typename T, bool Increasing> class Selfiterator;
   treats the type T (which should be like an integer) as 
   an iterator. Derefencing it just gives the T value.

   template<typename T, bool Increasing> class Range;
   creates a selfiterator from a range.

   also has template functions range, rrange, indices
   to form Range from lower and upper bounds or
   index range of an object.

enumvector.h++
   template<typename E, typename T> class Enumvector;

   This is like a vector<T> but indexed by enum (see later) E.

probvector.h++
   template<typename E, typename> class Probvector;
   This is a probability vector indexed by E. The second parameter
   is the random number generator. A probability vector is a
   normalized vector of doubles. Actually, the vector is normalized
   to a weight which can be specified in various calls, rather than
   the being fixed at 1. The weight can be queried.

   The mutation operator is fixed to be Gaussian on probit space.
   should make this user specifiable.

counts.h++
   struct Counts
   template<typename T> void summarize(const Enumvector<T, Counts>);

CLASS HIERARCHY

enum.h++
   template<const char* id> class Enum;

   Enum is a typed range of integers from 0 to its size.
   It can be converted to integer by the explicit protected 
   type converstion and constructor. Publcly it can
   be converted to integer by int uniqid() const. It
   also has a public
     virtual double match(const Enum& m) const;
   that is initialized to a convenient function.
   It can also be publicly compared for equality and written
   out: the string pointed to by its template parameter is 
   written as the identifier.

   Static private member specifies size: needs to be set before
   using any instance of Enum. (Also needs to be defined with initial
   value of 0).
   public interface
       void Enum<id>::setn(int);
       int Enum<id>::getn();

meme.h++
lex.h++
agent.h++
   template<typename Base> class Meme/Lexeme/Agent: public Base;
     currently empty.  The idea is that different
     Bases can produce different kinds of Lexemes (as in
     incompatible languages).  Language later assumes that Base
     is an Enum like object.

language.h++
   template<typename Meme, typename Lexeme, typename R> 
    class Language: public Enumvector<Meme, Probvector<Lexeme, R>>;
   The heart of the code. See main.c++ for a description.
   Should change to allow taking a class derived from Probvector so
   that things like mutate can be modified.

network.h++
   template<typename T,typename R> class Network: public Probvector<T,R>;
   Provides
     virtual R neighbor(const T&, R&);
     virtual double match(const T&, const T&) const;

MAIN FILES

main.c++
   Heavily commented

main.h++
   Moved all includes from main.c++ to allow header precompilation.


Makefile
