#!/usr/bin/python

# Wrapper to run Tanmoy's code in model B code using the same incantations as Richard's
# original C code. Not all arguments are (yet) supported

import argparse, subprocess, time

parser = argparse.ArgumentParser(description='Run model B using similar command-line options the original coordinate code')
parser.add_argument('--agents',	'-N', default='10', help='System size')
parser.add_argument('--rounds', '-t', default='100', help='Number of interaction rounds')
parser.add_argument('--bits',	'-b', default='4', help='Number of meaning/signal bits')
parser.add_argument('--mleak',	'-m', default='0.1', help='Weight acquired by neighbouring meanings')
parser.add_argument('--sleak',	'-s', default='0.1', help='Weight acquired by neighbouring signals')
parser.add_argument('--feedback','-f', default='1.0',  help='Feedback quality (0 for deterministic feedback)')
parser.add_argument('--vary',	'-v', default='0.01', help='Variation in association per interaction')
parser.add_argument('--init',    '-i', choices=('uniform','identity','rook'), default='uniform', help='Initial condition [uniform|identity|rook]')
parser.add_argument('--positivity', '-p', action='store_true', help='Suppress negative feedback')

args = parser.parse_args()

# For now we reject options that can't be replicated in Tanmoy's code (yet)
if args.mleak != '0.1' or args.sleak != '0.1':
    print "Leakage in meaning-signal space is not currently supported"
    exit(1)
if args.feedback != '1.0':
    print "We only allow the highest quality stochastic feedback at the moment"
    exit(1)
if args.init != 'uniform':
    print "Tanmoy's code accommodates a different set of initial conditions that I don't fully understand yet"
    exit(1)
if args.positivity:
    print "There is no option to suppress negative feedback"
    exit(1)
    
# Open a pipe to model B
simcode = subprocess.Popen(['./main','b'],stdin=subprocess.PIPE)

# First it expects memes, lexemes, agents
simcode.stdin.write('{ml} {ml} {a}\n'.format(ml=1<<int(args.bits),a=args.agents))
# Then uniform, synchstart: can't configure these just now
simcode.stdin.write('0 0\n')
# Reinforcement learning rate
simcode.stdin.write('{v}\n'.format(v=args.vary))
# Now length of inner loop (=#agents), outerloop, printfreq (once per round)
roundlen = 1<<(2*int(args.bits))
simcode.stdin.write('{a} {o} {p}\n'.format(a=args.agents, o=int(args.rounds)*roundlen, p=roundlen))
# Random number seed - use the system clock with the integer and fractional parts as separate seeds
now = time.time()
simcode.stdin.write('{s1} {s2}\n'.format(s1=int(now),s2=int((now%1.0)*1000)))
simcode.stdin.close()
simcode.wait()

    
